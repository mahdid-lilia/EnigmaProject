# Form implementation generated from reading ui file '.\UI.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from fileinput import filename
from tkinter.ttk import Separator
from PyQt5 import QtCore, QtWidgets, QtGui, QtMultimedia
from PyQt5.QtWidgets import QMessageBox
import numpy as np
from numpy import unicode_
import pandas as pd

from Exceptions import *
from src.enigma import *

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

# define CSS loader
def CssLoader(filename):
    with open(filename, 'r') as rd:
        content = rd.read()
        rd.close()
    return content


# Resolve bug
global resolveBug
resolveBug = 2

# Define styles
styleDisable = "background-color : gray"
styleEnable = """
                background-color : #7c3ad3;
                #pushButtonConf:hover, #pushButtonEnc:hover, #pushButtonDec:hover, #pushButtonNext:hover, #pushButtonRAZ:hover{
                    background-color : #00BCD4;
                    border : 1px solid #00BCD4;
                    
                }
                """
defaultStyle = "color:black"
global rotors
global rotor1, rotor2, rotor3, saveRotor1, saveRotor2, saveRotor3, saveConfRotor1, saveConfRotor2, saveConfRotor3, reflector, alphabet
global fileName
fileName = 'assets/files/Rotors.csv'

rotors = readFile(fileName)
rotor1, rotor2, rotor3 = [rotors[0], rotors[1]], [rotors[2], rotors[3]], [rotors[4], rotors[5]]
saveRotor1, saveRotor2, saveRotor3 = [], [], []
saveConfRotor1, saveConfRotor2, saveConfRotor3 = [], [], []
# Save rotor content
saveRotor1.extend(rotor1)
saveRotor2.extend(rotor2)
saveRotor3.extend(rotor3)
# ---------------------#
reflector = readFile('assets/files/Reflector.csv')
alphabet = readFile('assets/files/Alphabet.csv')
global verif
global msg
global ordList
global rotor
global nbrDecal

rotor = rotor3
nbrDecal = "0"
verif = True


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setEnabled(True)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setEnabled(True)
        self.menuFile.setAutoFillBackground(False)
        self.menuFile.setTearOffEnabled(False)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.actionOpen_configuration_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_configuration_file.setObjectName("actionOpen_configuration_file")
        self.actionUse_current_configuration = QtWidgets.QAction(MainWindow)
        self.actionUse_current_configuration.setObjectName("actionUse_current_configuration")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuFile.addAction(self.actionOpen_configuration_file)
        self.menuFile.addAction(self.actionUse_current_configuration)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menubar.addAction(self.menuFile.menuAction())

        # Import CSS file
        MainWindow.setStyleSheet(CssLoader('styles/main.css'))

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -250, 975, 950))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.groupBoxMachine = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.groupBoxMachine.setMinimumSize(QtCore.QSize(0, 400))
        self.groupBoxMachine.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBoxMachine.setObjectName("groupBoxMachine")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBoxMachine)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayoutMachine = QtWidgets.QGridLayout()
        self.gridLayoutMachine.setObjectName("gridLayoutMachine")
        self.labelMachineReflector = QtWidgets.QLabel(self.groupBoxMachine)
        self.labelMachineReflector.setStyleSheet("border: solid")
        self.labelMachineReflector.setObjectName("labelMachineReflector")
        self.gridLayoutMachine.addWidget(self.labelMachineReflector, 0, 1, 1, 1)
        self.labelMachineRotor2 = QtWidgets.QLabel(self.groupBoxMachine)
        self.labelMachineRotor2.setObjectName("labelMachineRotor2")
        self.gridLayoutMachine.addWidget(self.labelMachineRotor2, 4, 1, 1, 1)
        self.labelMachineRotor3 = QtWidgets.QLabel(self.groupBoxMachine)
        self.labelMachineRotor3.setObjectName("labelMachineRotor3")
        self.gridLayoutMachine.addWidget(self.labelMachineRotor3, 2, 1, 1, 1)
        self.labelMachineRotor1 = QtWidgets.QLabel(self.groupBoxMachine)
        self.labelMachineRotor1.setObjectName("labelMachineRotor1")
        self.gridLayoutMachine.addWidget(self.labelMachineRotor1, 6, 1, 1, 1)
        self.gridLayoutReflector = QtWidgets.QGridLayout()
        self.gridLayoutReflector.setObjectName("gridLayoutReflector")
        self.gridLayoutMachine.addLayout(self.gridLayoutReflector, 0, 0, 1, 1)
        self.gridLayoutRotor2 = QtWidgets.QGridLayout()
        self.gridLayoutRotor2.setObjectName("gridLayoutRotor2")
        self.gridLayoutMachine.addLayout(self.gridLayoutRotor2, 4, 0, 1, 1)
        self.gridLayoutRotor3 = QtWidgets.QGridLayout()
        self.gridLayoutRotor3.setObjectName("gridLayoutRotor3")
        self.gridLayoutMachine.addLayout(self.gridLayoutRotor3, 2, 0, 1, 1)
        self.gridLayoutRotor1 = QtWidgets.QGridLayout()
        self.gridLayoutRotor1.setObjectName("gridLayoutRotor1")

        self.gridLayoutMachine.addLayout(self.gridLayoutRotor1, 6, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayoutMachine.addItem(spacerItem, 3, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayoutMachine.addItem(spacerItem1, 1, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayoutMachine.addItem(spacerItem2, 5, 1, 1, 1)
        self.verticalLayout.addLayout(self.gridLayoutMachine)
        self.verticalLayout_5.addWidget(self.groupBoxMachine)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_5.addItem(spacerItem3)
        self.groupBoxKey = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.groupBoxKey.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBoxKey.setObjectName("groupBoxKey")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBoxKey)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayoutKey = QtWidgets.QVBoxLayout()
        self.verticalLayoutKey.setObjectName("verticalLayoutKey")
        self.horizontalLayoutRotor1 = QtWidgets.QHBoxLayout()
        self.horizontalLayoutRotor1.setContentsMargins(0, -1, 30, -1)
        self.horizontalLayoutRotor1.setSpacing(6)
        self.horizontalLayoutRotor1.setObjectName("horizontalLayoutRotor1")
        self.labelKeyRotor1 = QtWidgets.QLabel(self.groupBoxKey)
        self.labelKeyRotor1.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight | QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.labelKeyRotor1.setWordWrap(False)
        self.labelKeyRotor1.setIndent(0)
        self.labelKeyRotor1.setObjectName("labelKeyRotor1")
        self.horizontalLayoutRotor1.addWidget(self.labelKeyRotor1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor1.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor1.addItem(spacerItem5)
        self.spinBox = QtWidgets.QSpinBox(self.groupBoxKey)
        self.spinBox.setMinimumSize(QtCore.QSize(200, 0))
        self.spinBox.setMaximumSize(QtCore.QSize(200, 16777215))
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayoutRotor1.addWidget(self.spinBox)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor1.addItem(spacerItem6)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor1.addItem(spacerItem7)
        self.comboBoxRotor1 = QtWidgets.QComboBox(self.groupBoxKey)
        self.comboBoxRotor1.setMinimumSize(QtCore.QSize(200, 0))
        self.comboBoxRotor1.setMaximumSize(QtCore.QSize(200, 16777215))
        self.comboBoxRotor1.setObjectName("comboBoxRotor1")
        self.comboBoxRotor1.addItem("")
        self.comboBoxRotor1.addItem("")
        self.horizontalLayoutRotor1.addWidget(self.comboBoxRotor1)
        spacerItem8 = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Minimum)

        self.horizontalLayoutRotor1.addItem(spacerItem8)
        self.lineEditRotor1 = QtWidgets.QLineEdit(self.groupBoxKey)
        self.lineEditRotor1.setMinimumSize(QtCore.QSize(200, 0))
        self.lineEditRotor1.setMaximumSize(QtCore.QSize(200, 16777215))
        self.lineEditRotor1.setObjectName("lineEditRotor1")
        self.horizontalLayoutRotor1.addWidget(self.lineEditRotor1)
        self.verticalLayoutKey.addLayout(self.horizontalLayoutRotor1)
        self.horizontalLayoutRotor2 = QtWidgets.QHBoxLayout()
        self.horizontalLayoutRotor2.setContentsMargins(0, -1, 30, -1)
        self.horizontalLayoutRotor2.setSpacing(6)
        self.horizontalLayoutRotor2.setObjectName("horizontalLayoutRotor2")
        self.labelKeyRotor2 = QtWidgets.QLabel(self.groupBoxKey)
        self.labelKeyRotor2.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight | QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.labelKeyRotor2.setWordWrap(False)
        self.labelKeyRotor2.setIndent(0)
        self.labelKeyRotor2.setObjectName("labelKeyRotor2")
        self.horizontalLayoutRotor2.addWidget(self.labelKeyRotor2)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor2.addItem(spacerItem9)
        self.spinBox_2 = QtWidgets.QSpinBox(self.groupBoxKey)
        self.spinBox_2.setMinimumSize(QtCore.QSize(200, 0))
        self.spinBox_2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.spinBox_2.setObjectName("spinBox_2")
        self.horizontalLayoutRotor2.addWidget(self.spinBox_2)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor2.addItem(spacerItem10)
        self.comboBoxRotor2 = QtWidgets.QComboBox(self.groupBoxKey)
        self.comboBoxRotor2.setMinimumSize(QtCore.QSize(200, 0))
        self.comboBoxRotor2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.comboBoxRotor2.setObjectName("comboBoxRotor2")
        self.comboBoxRotor2.addItem("")
        self.comboBoxRotor2.addItem("")
        self.horizontalLayoutRotor2.addWidget(self.comboBoxRotor2)
        spacerItem11 = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor2.addItem(spacerItem11)
        self.lineEditRotor2 = QtWidgets.QLineEdit(self.groupBoxKey)
        self.lineEditRotor2.setMinimumSize(QtCore.QSize(200, 0))
        self.lineEditRotor2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.lineEditRotor2.setObjectName("lineEditRotor2")
        self.horizontalLayoutRotor2.addWidget(self.lineEditRotor2)
        self.verticalLayoutKey.addLayout(self.horizontalLayoutRotor2)
        self.horizontalLayoutRotor3 = QtWidgets.QHBoxLayout()
        self.horizontalLayoutRotor3.setContentsMargins(0, -1, 30, -1)
        self.horizontalLayoutRotor3.setSpacing(6)
        self.horizontalLayoutRotor3.setObjectName("horizontalLayoutRotor3")
        self.labelKeyRotor3 = QtWidgets.QLabel(self.groupBoxKey)
        self.labelKeyRotor3.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight | QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.labelKeyRotor3.setWordWrap(False)
        self.labelKeyRotor3.setIndent(0)
        self.labelKeyRotor3.setObjectName("labelKeyRotor3")
        self.horizontalLayoutRotor3.addWidget(self.labelKeyRotor3)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor3.addItem(spacerItem12)
        self.spinBox_3 = QtWidgets.QSpinBox(self.groupBoxKey)
        self.spinBox_3.setMinimumSize(QtCore.QSize(200, 0))
        self.spinBox_3.setMaximumSize(QtCore.QSize(200, 16777215))
        self.spinBox_3.setObjectName("spinBox_3")
        self.horizontalLayoutRotor3.addWidget(self.spinBox_3)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor3.addItem(spacerItem13)
        self.comboBoxRotor3 = QtWidgets.QComboBox(self.groupBoxKey)
        self.comboBoxRotor3.setMinimumSize(QtCore.QSize(200, 0))
        self.comboBoxRotor3.setMaximumSize(QtCore.QSize(200, 16777215))
        self.comboBoxRotor3.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContentsOnFirstShow)
        self.comboBoxRotor3.setDuplicatesEnabled(False)
        self.comboBoxRotor3.setObjectName("comboBoxRotor3")
        self.comboBoxRotor3.addItem("")
        self.comboBoxRotor3.addItem("")
        self.horizontalLayoutRotor3.addWidget(self.comboBoxRotor3)
        spacerItem14 = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayoutRotor3.addItem(spacerItem14)
        self.lineEditRotor3 = QtWidgets.QLineEdit(self.groupBoxKey)
        self.lineEditRotor3.setMinimumSize(QtCore.QSize(200, 0))
        self.lineEditRotor3.setMaximumSize(QtCore.QSize(200, 16777215))
        self.lineEditRotor3.setObjectName("lineEditRotor3")
        self.horizontalLayoutRotor3.addWidget(self.lineEditRotor3)
        self.verticalLayoutKey.addLayout(self.horizontalLayoutRotor3)
        self.verticalLayout_7.addLayout(self.verticalLayoutKey)
        self.verticalLayout_5.addWidget(self.groupBoxKey)
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_5.addItem(spacerItem15)
        self.groupBoxControl = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.groupBoxControl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBoxControl.setObjectName("groupBoxControl")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBoxControl)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.buttonLayout = QtWidgets.QHBoxLayout()
        self.buttonLayout.setObjectName("buttonLayout")
        self.pushButtonConf = QtWidgets.QPushButton(self.groupBoxControl)
        self.pushButtonConf.setMinimumSize(QtCore.QSize(140, 0))
        self.pushButtonConf.setStyleSheet("")
        self.pushButtonConf.setObjectName("pushButtonConf")
        self.buttonLayout.addWidget(self.pushButtonConf)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.buttonLayout.addItem(spacerItem16)
        self.pushButtonEnc = QtWidgets.QPushButton(self.groupBoxControl)
        self.pushButtonEnc.setMinimumSize(QtCore.QSize(140, 0))
        self.pushButtonEnc.setStyleSheet("")
        self.pushButtonEnc.setObjectName("pushButtonEnc")
        self.buttonLayout.addWidget(self.pushButtonEnc)
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.buttonLayout.addItem(spacerItem17)
        self.pushButtonDec = QtWidgets.QPushButton(self.groupBoxControl)
        self.pushButtonDec.setMinimumSize(QtCore.QSize(140, 0))
        self.pushButtonDec.setObjectName("pushButtonDec")
        self.buttonLayout.addWidget(self.pushButtonDec)
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.buttonLayout.addItem(spacerItem18)
        self.pushButtonNext = QtWidgets.QPushButton(self.groupBoxControl)
        self.pushButtonNext.setMinimumSize(QtCore.QSize(140, 0))
        self.pushButtonNext.setObjectName("pushButtonNext")
        self.buttonLayout.addWidget(self.pushButtonNext)

        self.spinBox.setRange(1, 3)
        self.spinBox_2.setRange(1, 3)
        self.spinBox_3.setRange(1, 3)

        spacerItemRAZ = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                              QtWidgets.QSizePolicy.Policy.Minimum)
        self.buttonLayout.addItem(spacerItemRAZ)
        self.pushButtonRAZ = QtWidgets.QPushButton(self.groupBoxControl)
        self.pushButtonRAZ.setMinimumSize(QtCore.QSize(140, 0))
        self.pushButtonRAZ.setObjectName("pushButtonRAZ")
        self.buttonLayout.addWidget(self.pushButtonRAZ)

        self.verticalLayout_4.addLayout(self.buttonLayout)
        self.verticalLayout_5.addWidget(self.groupBoxControl)
        spacerItem19 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_5.addItem(spacerItem19)
        self.groupBoxMessage = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.groupBoxMessage.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBoxMessage.setObjectName("groupBoxMessage")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBoxMessage)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.messageLineEdit = QtWidgets.QLineEdit(self.groupBoxMessage)
        self.messageLineEdit.setObjectName("messageLineEdit")
        self.verticalLayout_3.addWidget(self.messageLineEdit)
        spacerItem20 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_3.addItem(spacerItem20)
        self.messageLabel = QtWidgets.QLabel(self.groupBoxMessage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.messageLabel.sizePolicy().hasHeightForWidth())
        self.messageLabel.setSizePolicy(sizePolicy)
        self.messageLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.messageLabel.setObjectName("messageLabel")
        self.verticalLayout_3.addWidget(self.messageLabel)
        spacerItem21 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout_3.addItem(spacerItem21)
        self.verticalLayout_6.addLayout(self.verticalLayout_3)
        self.verticalLayout_5.addWidget(self.groupBoxMessage)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)

        spacerItemAlphabet = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                                   QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayoutAlphabet = QtWidgets.QVBoxLayout(self.groupBoxMachine)
        self.verticalLayoutAlphabet.setObjectName("verticalLayoutAlphabet")
        self.verticalLayoutAlphabet.addItem(spacerItemAlphabet)
        self.gridLayoutMachine.addLayout(self.verticalLayoutAlphabet, 7, 0, 1, 1)

        self.gridLayoutAlphabet = QtWidgets.QGridLayout()
        self.gridLayoutAlphabet.setObjectName("gridLayoutAlphabet")
        self.gridLayoutMachine.addLayout(self.gridLayoutAlphabet, 8, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        self.messageLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditRotor1.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditRotor2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditRotor3.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox_2.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox_3.setAlignment(QtCore.Qt.AlignCenter)
        self.messageLabel.setAlignment(QtCore.Qt.AlignCenter)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # Disable buttons
        self.disableButton(self.pushButtonEnc, styleDisable, True)
        self.disableButton(self.pushButtonDec, styleDisable, True)
        self.disableButton(self.pushButtonNext, styleDisable, True)

        # Rotor priorities
        self.priorityList = [[], []]
        self.cpt = 0
        self.currentRotorPos = 0
        self.currentChar = 0
        # Show Data
        self.reflectorList, self.rotor1List, self.rotor2List, self.rotor3List, self.alphabetList = [], [], [], [], []

        self.reflectorList = self.initData(reflector, self.gridLayoutReflector, self.groupBoxMachine)
        self.rotor1List = self.initData(rotor1, self.gridLayoutRotor1, self.groupBoxMachine)
        self.rotor2List = self.initData(rotor2, self.gridLayoutRotor2, self.groupBoxMachine)
        self.rotor3List = self.initData(rotor3, self.gridLayoutRotor3, self.groupBoxMachine)
        self.alphabetList = self.initData(alphabet, self.gridLayoutAlphabet, self.groupBoxMachine)

        # Event manager
        self.pushButtonConf.clicked.connect(lambda: self.animateTurnRotor(rotor1, self.lineEditRotor1.text()))
        self.pushButtonConf.clicked.connect(lambda: self.animateTurnRotor(rotor2, self.lineEditRotor2.text()))
        self.pushButtonConf.clicked.connect(lambda: self.animateTurnRotor(rotor3, self.lineEditRotor3.text()))
        # Disable configuration button
        self.pushButtonConf.clicked.connect(lambda: self.disableButtonConf())

        # Resolving bugs by duplicating function's call
        self.pushButtonEnc.clicked.connect(lambda: self.encryptAllMessage())
        self.pushButtonDec.clicked.connect(lambda: self.encryptAllMessage())

        self.pushButtonNext.clicked.connect(lambda: self.nextStep())
        # RAZ button event manager
        self.pushButtonRAZ.clicked.connect(lambda: self.RAZEvent(fileName))

        # Define styles
        cursor = QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        self.pushButtonRAZ.setCursor(cursor)
        self.pushButtonDec.setCursor(cursor)
        self.pushButtonEnc.setCursor(cursor)
        self.pushButtonConf.setCursor(cursor)
        self.pushButtonNext.setCursor(cursor)

        self.actionQuit.triggered.connect(lambda : self.quitWindow())
        self.actionOpen_configuration_file.triggered.connect(lambda : self.openConfigurationFile())
        self.actionUse_current_configuration.triggered.connect(lambda : self.useCurrentConfiguration())

    def confirmationPopup(self, title, text, icon):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon)
        btnYes = QtWidgets.QPushButton(msg)
        btnYes.setText("Oui")
        btnNo = QtWidgets.QPushButton(msg)
        btnNo.setText("Non")
        msg.addButton(btnYes, msg.ButtonRole.ActionRole)
        msg.addButton(btnNo, msg.ButtonRole.ActionRole)
        msg.exec()

        res = msg.clickedButton().text()

        return res
        # if(res == btnYes.text()):
        #     sys.exit(app.exec())

    def quitWindow(self):
        if(self.confirmationPopup("Confirmation", "Voulez-vous vraiment quitter l'application ?", QMessageBox.Icon.Question) == "Oui"):
            sys.exit(app.exec())


    def RAZEvent(self, fileName):
        # sound.play()
        self.disableAllInputs(False)
        self.initRotors(mode='i')
        self.initVariables()
        self.spinBox.setValue(1)
        self.spinBox_2.setValue(1)
        self.spinBox_3.setValue(1)
        self.lineEditRotor1.setText('')
        self.lineEditRotor2.setText('')
        self.lineEditRotor3.setText('')
        self.spinBox.setValue(1)
        self.spinBox_2.setValue(1)
        self.spinBox_3.setValue(1)
        self.disableButton(self.pushButtonConf, styleEnable, False)
        self.disableButton(self.pushButtonNext, styleEnable, False)
        self.initColorAnimation(defaultStyle)
        self.messageLabel.setText("")
        self.messageLineEdit.setText("")
        self.disableButton(self.pushButtonEnc, styleDisable, True)
        self.disableButton(self.pushButtonDec, styleDisable, True)
        self.disableButton(self.pushButtonNext, styleDisable, True)

        global rotors
        global rotor1, rotor2, rotor3, saveRotor1, saveRotor2, saveRotor3, saveConfRotor1, saveConfRotor2, saveConfRotor3, reflector, alphabet

        rotors = readFile(fileName)
        rotor1, rotor2, rotor3 = [rotors[0], rotors[1]], [rotors[2], rotors[3]], [rotors[4], rotors[5]]
        saveRotor1, saveRotor2, saveRotor3 = [], [], []
        saveConfRotor1, saveConfRotor2, saveConfRotor3 = [], [], []
        # Save rotor content
        saveRotor1.extend(rotor1)
        saveRotor2.extend(rotor2)
        saveRotor3.extend(rotor3)

    def disableAllInputs(self, disable):
        self.pushButtonConf.setDisabled(disable)
        self.spinBox.setDisabled(disable)
        self.spinBox_2.setDisabled(disable)
        self.spinBox_3.setDisabled(disable)
        self.comboBoxRotor1.setDisabled(disable)
        self.comboBoxRotor2.setDisabled(disable)
        self.comboBoxRotor3.setDisabled(disable)

    # Define methods
    def disableButtonConf(self):
        try:
            nbr1, nbr2, nbr3 = int(self.lineEditRotor1.text()), int(self.lineEditRotor2.text()), int(
                self.lineEditRotor3.text())
            # Disable all the inputs to avoid any change while simulating message encryption
            self.disableAllInputs(True)
            self.disableButton(self.pushButtonConf, styleDisable, True)
            self.disableButton(self.pushButtonEnc, styleEnable, False)
            self.disableButton(self.pushButtonDec, styleEnable, False)
            self.disableButton(self.pushButtonNext, styleEnable, False)

            saveConfRotor1.extend(rotor1)
            saveConfRotor2.extend(rotor2)
            saveConfRotor3.extend(rotor3)

            spin1, spin2, spin3 = int(self.spinBox.text()), int(self.spinBox_2.text()), int(self.spinBox_3.text())

            if spin1 == spin2 or spin1 == spin3 or spin2 == spin3:
                raise PriorityExecption("Priority Execption")

        except PriorityExecption:
            self.showPopup("Priority configuration error",
                           "Please check your rotor configuration priorities !",
                           QMessageBox.Icon.Warning)
            self.disableAllInputs(False)
            self.disableButton(self.pushButtonConf, styleEnable, False)

        except:
            self.showPopup("Configuration error",
                           "Please fill the rotor configuration inputs correctly with integer values !",
                           QMessageBox.Icon.Warning)
            self.disableAllInputs(False)
            self.disableButton(self.pushButtonConf, styleEnable, False)

    def showPopup(self, title, text, icon, det=False, details=""):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon)
        if det is True:
            msg.setDetailedText(details)
        x = msg.exec()
        return msg.clickedButton().text()

    def initRotors(self, mode):
        # Save rotor content
        if mode == 'i':
            # RAZ
            rotor1.clear()
            rotor2.clear()
            rotor3.clear()
            rotor1.extend(saveRotor1)
            rotor2.extend(saveRotor2)
            rotor3.extend(saveRotor3)
        elif mode == 'c':
            # RAZ
            rotor1.clear()
            rotor2.clear()
            rotor3.clear()
            rotor1.extend(saveConfRotor1)
            rotor2.extend(saveConfRotor2)
            rotor3.extend(saveConfRotor3)

        # Init rotors
        self.replaceData(rotor1)
        self.replaceData(rotor2)
        self.replaceData(rotor3)

    def initData(self, data, gridLayoutData, groupBoxData):
        pushButtonData = list()
        row, col = len(data), len(data[0])
        for j in range(row):
            length = j * len(data[j])
            for i in range(col):
                pushButtonData.append(QtWidgets.QPushButton(groupBoxData))
                pushButtonData[i + length].setText(str(data[j][i]))
                pushButtonData[i + length].setMinimumSize(25, 25)
                gridLayoutData.addWidget(pushButtonData[i + length], j, i, 1, 1)

        return pushButtonData

    # Configure rotor
    def turnRotor(self, rotor, nbr):
        row = len(rotor)
        col = len(rotor[0])
        l = list()
        for i in range(row):
            l.append(list())
        if nbr > 0:
            for i in range(row):
                for j in range(col):
                    l[i].append(rotor[i][(j + col - nbr) % col])
        elif nbr < 0:
            for i in range(row):
                for j in range(col):
                    l[i].append(rotor[i][(j - nbr) % col])

        rotor.clear()
        rotor.extend(l)

        return rotor

    def encryptMessage(self, char):
        length = len(alphabet[0])
        char = char.upper()
        chemin = [[], []]
        positions = [[], []]

        # Aller
        position = alphabet[0].index(char)
        positions[0].append(position)
        chemin[0].append(rotor1[1][position])
        position = (position + chemin[0][0]) % length

        positions[0].append(position)
        chemin[0].append(rotor2[1][position])
        position = (position + chemin[0][1]) % length

        positions[0].append(position)
        chemin[0].append(rotor3[1][position])
        position = (position + chemin[0][2]) % length

        positions[0].append(position)
        chemin[0].append(reflector[0][position])
        position = (position + chemin[0][3]) % length

        positions[1].append(position)

        # Retour
        chemin[1].append(rotor3[0][position])
        position = (position + chemin[1][0]) % length
        positions[1].append(position)

        chemin[1].append(rotor2[0][position])
        position = (position + chemin[1][1]) % length
        positions[1].append(position)

        chemin[1].append(rotor1[0][position])
        position = (position + chemin[1][2]) % length
        positions[1].append(position)

        chemin[1].append(alphabet[0][position])
        encryptedChar = chemin[1][3]

        return (encryptedChar, positions)

    # Animate the rotation mouvement of rotor
    def animateTurnRotor(self, rotor, nbr):
        try:
            nbr = int(nbr)
            if nbr != 0:
                self.turnRotor(rotor, nbr)
                self.replaceData(rotor)
            else:
                self.initRotors(mode='i')
        except:
            pass

    def nextStep(self):

        # Get the list in the first time only
        global verif
        global msg
        global ordList
        global rotor
        global nbrDecal
        self.initColorAnimation(defaultStyle)
        try:
            # self.animateTurnRotor(rotor, nbrDecal)
            msg = self.messageLineEdit.text()
            if msg == '':
                raise IncorrectMessageException("Incorrect input")
            self.priorityList = [[int(self.spinBox.text()), int(self.spinBox_2.text()), int(self.spinBox_3.text())],
                                 [self.comboBoxRotor1.currentText(), self.comboBoxRotor2.currentText(),
                                  self.comboBoxRotor3.currentText()]]
            ordList = self.orderRotors()
            if self.currentChar < len(msg):
                char = msg[self.currentChar]
                positions = self.encryptMessage(char)[1]
                # Animation
                colorAnimA = """
                background-color : red;
                color: white;
                """
                colorAnimR = """
                background-color : blue;
                color: white;
                """
                length = len(alphabet[0])
                # Color going
                self.reflectorList[positions[1][0]].setStyleSheet(colorAnimR)
                self.rotor3List[positions[1][0]].setStyleSheet(colorAnimR)
                self.rotor2List[positions[1][1]].setStyleSheet(colorAnimR)
                self.rotor1List[positions[1][2]].setStyleSheet(colorAnimR)
                self.alphabetList[positions[1][3]].setStyleSheet(colorAnimR)

                self.animateTurnRotor(rotor, nbrDecal)
                # Color returning
                self.alphabetList[positions[0][0]].setStyleSheet(colorAnimA)
                self.rotor1List[positions[0][0] + length].setStyleSheet(colorAnimA)
                self.rotor2List[positions[0][1] + length].setStyleSheet(colorAnimA)
                self.rotor3List[positions[0][2] + length].setStyleSheet(colorAnimA)
                self.reflectorList[positions[0][3]].setStyleSheet(colorAnimA)

                self.currentChar += 1
                self.cpt += 1
                if self.cpt == len(alphabet[0]) + 1:
                    self.cpt = 0
                    self.currentRotorPos = (self.currentRotorPos + 1) % 3

                if ordList[0][self.currentRotorPos] == 1:
                    rotor = rotor1
                elif ordList[0][self.currentRotorPos] == 2:
                    rotor = rotor2
                elif ordList[0][self.currentRotorPos] == 3:
                    rotor = rotor3
                # self.animateTurnRotor(rotor, str(ordList[1][self.currentRotorPos]))
                nbrDecal = str(ordList[1][self.currentRotorPos])
                if self.currentChar == len(msg):
                    self.disableButton(self.pushButtonNext, styleDisable, True)
        except IncorrectMessageException:
            self.showPopup("Message error", "Please write your message in correct format !",
                           QMessageBox.Icon.Warning,
                           det=True, details="Correct format : {[a-z], [A-Z]}\nDon't use numbers or other symbols.")

    def disableButton(self, btn, style, bool):
        btn.setDisabled(bool)
        btn.setStyleSheet(style)

    def orderRotors(self):
        pr = self.priorityList[0]
        val = []
        pos = []
        for i in range(len(pr)):
            index = pr.index(i + 1)
            pos.append(index + 1)
            if self.priorityList[1][index] == 'G':
                val.append(-1)
            elif self.priorityList[1][index] == 'D':
                val.append(1)

        l = [pos, val]
        return l

    def replaceData(self, data):
        nbElem = 5
        length = len(alphabet[0])
        start, end = int(), int()
        l1 = data[0]
        l2 = data[1]
        l = list()
        for elem in l1:
            l.append(elem)
        for elem in l2:
            l.append(elem)

        if data == rotor1:
            start, end = length + nbElem, nbElem + 3 * length
        elif data == rotor2:
            start, end = nbElem + 3 * length, nbElem + 5 * length
        elif data == rotor3:
            start, end = nbElem + 5 * length, nbElem + 7 * length

        j = 0
        for i in range(start, end):
            self.groupBoxMachine.children()[i].setText(str(l[j]))
            j += 1

    def encryptAllMessage(self):
        global nbrDecal
        try:
            global resolveBug
            for i in range(resolveBug):
                self.initRotors('c')
                global msg
                msg = self.messageLineEdit.text()
                if msg == '':
                    raise IncorrectMessageException("Incorrect input")
                encrypted = ''
                for i in range(len(msg)):
                    encrypted += self.encryptMessage(msg[i])[0]
                    self.nextStep()

                self.messageLabel.setText(encrypted)
                self.initColorAnimation(defaultStyle)
                # Init variables
                self.initVariables()
                self.disableButton(self.pushButtonNext, styleEnable, False)
                self.initRotors('c')
                nbrDecal = 0
        except:
            self.showPopup("Message error", "Please write your message in correct format !",
                           QMessageBox.Icon.Warning, det=True,
                           details="Correct format : {[a-z], [A-Z]}\nDon't use numbers or other symbols.")
            self.initVariables()

    def initColorAnimation(self, style):
        for i in range(len(self.rotor1List)):
            self.rotor1List[i].setStyleSheet(style)
        for i in range(len(self.rotor2List)):
            self.rotor2List[i].setStyleSheet(style)
        for i in range(len(self.rotor3List)):
            self.rotor3List[i].setStyleSheet(style)
        for i in range(len(self.reflectorList)):
            self.reflectorList[i].setStyleSheet(style)
        for i in range(len(self.alphabetList)):
            self.alphabetList[i].setStyleSheet(style)

    def initVariables(self):
        global msg
        global verif
        verif = True
        self.priorityList = [[], []]
        msg = ''
        self.cpt = 0
        self.currentRotorPos = 0
        self.currentChar = 0

    def useCurrentConfiguration(self):
        global fileName
        if(self.confirmationPopup("Confirmation", "Voulez-vous vraiment revenir à la configuration initiale ?", QMessageBox.Icon.Question) == "Oui"):
            fileName = 'assets/files/Rotors.csv'
            self.RAZEvent(fileName)
            self.RAZEvent(fileName)


            global rotors
            global rotor1, rotor2, rotor3, saveRotor1, saveRotor2, saveRotor3, saveConfRotor1, saveConfRotor2, saveConfRotor3, reflector, alphabet
            rotors = readFile(fileName)
            rotor1, rotor2, rotor3 = [rotors[0], rotors[1]], [rotors[2], rotors[3]], [rotors[4], rotors[5]]
            saveRotor1, saveRotor2, saveRotor3 = [], [], []
            saveConfRotor1, saveConfRotor2, saveConfRotor3 = [], [], []
            # Save rotor content
            saveRotor1.extend(rotor1)
            saveRotor2.extend(rotor2)
            saveRotor3.extend(rotor3)


    def openConfigurationFile(self):
        global fileName
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(caption="Ouvrir un fichier de configuration", filter="Fichiers CSV (*.csv)")
        if filename:
            try:
                fileName = filename
                df = pd.read_csv(fileName, sep=";", header=None)

                assert df.shape[0] == 6
                assert df.shape[1] == 26
                df = df.astype(dtype=np.int64)
                self.RAZEvent(fileName)
                self.RAZEvent(fileName)

                global rotors
                global rotor1, rotor2, rotor3, saveRotor1, saveRotor2, saveRotor3, saveConfRotor1, saveConfRotor2, saveConfRotor3, reflector, alphabet

                rotors = readFile(fileName)
                rotor1, rotor2, rotor3 = [rotors[0], rotors[1]], [rotors[2], rotors[3]], [rotors[4], rotors[5]]
                saveRotor1, saveRotor2, saveRotor3 = [], [], []
                saveConfRotor1, saveConfRotor2, saveConfRotor3 = [], [], []
                # Save rotor content
                saveRotor1.extend(rotor1)
                saveRotor2.extend(rotor2)
                saveRotor3.extend(rotor3)

            except:
                self.showPopup("Avertissement", "Attention, votre de fichier de configuration ne respecte pas le format requis !", QMessageBox.Icon.Warning, True, "Le format requis :\nDimensions : 6x26\nLes caractères doivent être des entiers\nSéparateur : ';'")


        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bienvenue dans Enigma"))
        self.groupBoxMachine.setTitle(_translate("MainWindow", "Machine"))
        self.labelMachineReflector.setText(_translate("MainWindow", "Réflecteur"))
        self.labelMachineRotor2.setText(_translate("MainWindow", "Rotor 2"))
        self.labelMachineRotor3.setText(_translate("MainWindow", "Rotor 3"))
        self.labelMachineRotor1.setText(_translate("MainWindow", "Rotor 1"))
        self.groupBoxKey.setTitle(_translate("MainWindow", "Clé"))
        self.labelKeyRotor1.setText(_translate("MainWindow", "Rotor 1"))
        self.comboBoxRotor1.setItemText(0, _translate("MainWindow", "D"))
        self.comboBoxRotor1.setItemText(1, _translate("MainWindow", "G"))
        self.labelKeyRotor2.setText(_translate("MainWindow", "Rotor 2"))
        self.comboBoxRotor2.setItemText(0, _translate("MainWindow", "D"))
        self.comboBoxRotor2.setItemText(1, _translate("MainWindow", "G"))
        self.labelKeyRotor3.setText(_translate("MainWindow", "Rotor 3"))
        self.comboBoxRotor3.setItemText(0, _translate("MainWindow", "D"))
        self.comboBoxRotor3.setItemText(1, _translate("MainWindow", "G"))
        self.groupBoxControl.setTitle(_translate("MainWindow", "Contrôle"))
        self.pushButtonConf.setText(_translate("MainWindow", "Configurer les rotors"))
        self.pushButtonEnc.setText(_translate("MainWindow", "Encrypter"))
        self.pushButtonDec.setText(_translate("MainWindow", "Décrypter"))
        self.pushButtonNext.setText(_translate("MainWindow", "Etape suivante"))
        self.groupBoxMessage.setTitle(_translate("MainWindow", "Message"))
        self.messageLabel.setText(_translate("MainWindow", ""))
        self.pushButtonRAZ.setText(_translate("MainWindow", "RAZ"))
        # Add shortcuts
        self.pushButtonRAZ.setShortcut(_translate("MainWindow", "R"))
        self.pushButtonConf.setShortcut(_translate("MainWindow", "C"))
        self.pushButtonNext.setShortcut(_translate("MainWindow", "Right"))
        self.pushButtonEnc.setShortcut(_translate("MainWindow", "E"))
        self.pushButtonDec.setShortcut(_translate("MainWindow", "D"))

        self.menuFile.setTitle(_translate("MainWindow", "Fichier"))
        self.actionOpen_configuration_file.setText(_translate("MainWindow", "Importer une configuration ..."))
        self.actionOpen_configuration_file.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionUse_current_configuration.setText(_translate("MainWindow", "Revenir à la configuration initiale"))
        self.actionUse_current_configuration.setShortcut(_translate("MainWindow", "Ctrl+Alt+O"))
        self.actionQuit.setText(_translate("MainWindow", "Quitter"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
